diff --git a/src/http/ngx_http_request.c b/src/http/ngx_http_request.c
index bd2be5ea..d06bc47f 100644
--- a/src/http/ngx_http_request.c
+++ b/src/http/ngx_http_request.c
@@ -2018,13 +2018,6 @@ ngx_http_process_request_header(ngx_http_request_t *r)
         }
     }
 
-    if (r->method == NGX_HTTP_CONNECT) {
-        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
-                      "client sent CONNECT method");
-        ngx_http_finalize_request(r, NGX_HTTP_NOT_ALLOWED);
-        return NGX_ERROR;
-    }
-
     if (r->method == NGX_HTTP_TRACE) {
         ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                       "client sent TRACE method");
diff --git a/src/http/ngx_http_upstream.c b/src/http/ngx_http_upstream.c
index f5db6533..65445e6a 100644
--- a/src/http/ngx_http_upstream.c
+++ b/src/http/ngx_http_upstream.c
@@ -1,4 +1,3 @@
-
 /*
  * Copyright (C) Igor Sysoev
  * Copyright (C) Nginx, Inc.
@@ -37,6 +36,8 @@ static void ngx_http_upstream_check_broken_connection(ngx_http_request_t *r,
     ngx_event_t *ev);
 static void ngx_http_upstream_connect(ngx_http_request_t *r,
     ngx_http_upstream_t *u);
+static void ngx_http_upstream_connect_raw(ngx_http_request_t *r, ngx_http_upstream_t *u);
+static void ngx_http_upstream_connect_handler(ngx_event_t *ev);
 static ngx_int_t ngx_http_upstream_reinit(ngx_http_request_t *r,
     ngx_http_upstream_t *u);
 static void ngx_http_upstream_send_request(ngx_http_request_t *r,
@@ -1676,6 +1677,57 @@ ngx_http_upstream_connect(ngx_http_request_t *r, ngx_http_upstream_t *u)
 #endif
 
     ngx_http_upstream_send_request(r, u, 1);
+
+    if (r->method == NGX_HTTP_CONNECT) {
+        // Transition to stream handling
+        ngx_http_upstream_connect_raw(r, u);
+        return;
+    }
+}
+
+static void
+ngx_http_upstream_connect_raw(ngx_http_request_t *r, ngx_http_upstream_t *u)
+{
+    ngx_int_t                  rc;
+    ngx_connection_t          *c;
+    ngx_http_core_loc_conf_t  *clcf;
+
+    r->connection->log->action = "connecting to upstream";
+
+    // Initialize upstream state for raw connection
+    if (u->state && u->state->response_time == (ngx_msec_t) -1) {
+        u->state->response_time = ngx_current_msec - u->start_time;
+    }
+
+    u->state = ngx_array_push(r->upstream_states);
+    if (u->state == NULL) {
+        ngx_http_upstream_finalize_request(r, u, NGX_HTTP_INTERNAL_SERVER_ERROR);
+        return;
+    }
+
+    ngx_memzero(u->state, sizeof(ngx_http_upstream_state_t));
+
+    u->start_time = ngx_current_msec;
+
+    u->state->response_time = (ngx_msec_t) -1;
+    u->state->connect_time = (ngx_msec_t) -1;
+    u->state->header_time = (ngx_msec_t) -1;
+
+    rc = ngx_event_connect_peer(&u->peer);
+
+    if (rc == NGX_ERROR || rc == NGX_DECLINED) {
+        ngx_http_upstream_finalize_request(r, u, NGX_HTTP_BAD_GATEWAY);
+        return;
+    }
+
+    if (rc == NGX_AGAIN) {
+        ngx_add_timer(c->write, clcf->connect_timeout);
+        c->write->handler = ngx_http_upstream_connect_handler;
+        return;
+    }
+
+    // Directly proxy the TCP stream
+    ngx_http_upstream_send_response(r, u);
 }
 
 
@@ -4107,7 +4159,6 @@ ngx_http_upstream_process_upstream(ngx_http_request_t *r,
 
             return;
         }
-
         if (ngx_event_pipe(p, 0) == NGX_ABORT) {
             ngx_http_upstream_finalize_request(r, u, NGX_ERROR);
             return;
@@ -6812,3 +6863,32 @@ ngx_http_upstream_init_main_conf(ngx_conf_t *cf, void *conf)
 
     return NGX_CONF_OK;
 }
+
+
+static void
+ngx_http_upstream_connect_handler(ngx_event_t *ev)
+{
+    ngx_connection_t      *c;
+    ngx_http_request_t    *r;
+    ngx_http_upstream_t   *u;
+
+    c = ev->data;
+    r = c->data;
+    u = r->upstream;
+
+    if (ev->timedout) {
+        ngx_log_error(NGX_LOG_ERR, c->log, NGX_ETIMEDOUT, "upstream timed out");
+        ngx_http_upstream_finalize_request(r, u, NGX_HTTP_GATEWAY_TIME_OUT);
+        return;
+    }
+
+    ngx_del_timer(c->write);
+
+    if (ngx_http_upstream_test_connect(c) != NGX_OK) {
+        ngx_http_upstream_next(r, u, NGX_HTTP_UPSTREAM_FT_ERROR);
+        return;
+    }
+
+    ngx_http_upstream_send_request(r, u, 1);
+}
+
